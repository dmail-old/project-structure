{"version":3,"file":"index.js","sources":["../src/ressourceMatch.js","../src/ressourceToMeta.js","../src/ressourceCanContainsMetaMatching.js","../src/forEachRessourceMatching.js","../src/patternGroupToMetaMap.js"],"sourcesContent":["// https://git-scm.com/docs/gitignore\n// https://github.com/kaelzhang/node-ignore\n\nexport const ressourceMatch = (pattern, ressource) => {\n  return match({\n    patterns: pattern.split(\"/\"),\n    parts: ressource.split(\"/\"),\n    lastPatternRequired: false,\n    lastSkipRequired: true,\n    skipPredicate: (sequencePattern) => sequencePattern === \"**\",\n    matchPart: (sequencePattern, sequencePart) => {\n      return match({\n        patterns: sequencePattern.split(\"\"),\n        parts: sequencePart.split(\"\"),\n        lastPatternRequired: true,\n        lastSkipRequired: false,\n        skipPredicate: (charPattern) => charPattern === \"*\",\n        matchPart: (charPattern, charSource) => {\n          const matched = charPattern === charSource\n          return {\n            matched,\n            patternIndex: 0,\n            partIndex: 0,\n            matchIndex: matched ? 1 : 0,\n          }\n        },\n      })\n    },\n  })\n}\n\nconst match = ({\n  patterns,\n  parts,\n  skipPredicate,\n  lastSkipRequired,\n  lastPatternRequired,\n  matchPart,\n  skipUntilStartsMatching = false,\n}) => {\n  let matched\n  let patternIndex = 0\n  let partIndex = 0\n  let matchIndex = 0\n\n  if (patterns.length === 0 && parts.length === 0) {\n    matched = true\n  } else if (patterns.length === 0 && parts.length) {\n    matched = true\n    matchIndex = parts.length\n  } else if (patterns.length && parts.length === 0) {\n    matched = false\n  } else {\n    matched = true\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const pattern = patterns[patternIndex]\n      const part = parts[partIndex]\n      const isSkipPattern = skipPredicate(pattern)\n      const isLastPattern = patternIndex === patterns.length - 1\n      const isLastPart = partIndex === parts.length - 1\n\n      if (isSkipPattern && isLastPart && isLastPattern) {\n        matchIndex += part.length\n        break\n      }\n\n      if (isSkipPattern && isLastPattern && isLastPart === false) {\n        matchIndex += part.length\n        break\n      }\n\n      if (isSkipPattern && isLastPattern === false && isLastPart) {\n        // test next pattern on current part\n        patternIndex++\n        const nextPatternResult = match({\n          patterns: patterns.slice(patternIndex),\n          parts: parts.slice(partIndex),\n          skipPredicate,\n          lastSkipRequired,\n          lastPatternRequired,\n          matchPart,\n        })\n        matched = nextPatternResult.matched\n        patternIndex += nextPatternResult.patternIndex\n        partIndex += nextPatternResult.partIndex\n\n        if (matched && patternIndex === patterns.length - 1) {\n          matchIndex += nextPatternResult.matchIndex\n          break\n        }\n        if (matched && partIndex === parts.length - 1) {\n          matchIndex += nextPatternResult.matchIndex\n          break\n        }\n        if (matched) {\n          matchIndex += nextPatternResult.matchIndex\n          continue\n        }\n\n        // we still increase the matchIndex by the length of the part because\n        // this part has matched even if the full pattern is not satisfied\n        matchIndex += part.length\n        break\n      }\n\n      if (isSkipPattern && isLastPattern === false && isLastPart === false) {\n        // test next pattern on current part\n        patternIndex++\n\n        const skipResult = match({\n          patterns: patterns.slice(patternIndex),\n          parts: parts.slice(partIndex),\n          skipPredicate,\n          lastSkipRequired,\n          lastPatternRequired,\n          matchPart,\n          skipUntilStartsMatching: true,\n        })\n\n        matched = skipResult.matched\n        patternIndex += skipResult.patternIndex\n        partIndex += skipResult.partIndex\n        matchIndex += skipResult.matchIndex\n\n        if (matched && patternIndex === patterns.length - 1) {\n          break\n        }\n        if (matched && partIndex === parts.length - 1) {\n          break\n        }\n        if (matched) {\n          continue\n        }\n        break\n      }\n\n      const partMatch = matchPart(pattern, part)\n      matched = partMatch.matched\n      matchIndex += partMatch.matchIndex\n      if (matched === false && skipUntilStartsMatching) {\n        matchIndex += part.length\n      }\n\n      if (matched && isLastPattern && isLastPart) {\n        break\n      }\n\n      if (matched && isLastPattern && isLastPart === false) {\n        if (lastPatternRequired) {\n          matched = false\n        }\n        break\n      }\n\n      if (matched && isLastPattern === false && isLastPart) {\n        const remainingPatternAreSkip = patterns\n          .slice(patternIndex + 1)\n          .every((pattern) => skipPredicate(pattern))\n\n        if (remainingPatternAreSkip && lastSkipRequired) {\n          matched = false\n          break\n        }\n        if (remainingPatternAreSkip === false) {\n          matched = false\n          break\n        }\n        break\n      }\n\n      if (matched && isLastPattern === false && isLastPart === false) {\n        patternIndex++\n        partIndex++\n        continue\n      }\n\n      if (matched === false && skipUntilStartsMatching && isLastPart === false) {\n        partIndex++ // keep searching for that pattern\n        continue\n      }\n\n      break\n    }\n  }\n\n  return {\n    matched,\n    matchIndex,\n    patternIndex,\n    partIndex,\n  }\n}\n","import { ressourceMatch } from \"./ressourceMatch.js\"\n\nexport const ressourceToMeta = (metaMap, ressource) => {\n  return Object.keys(metaMap).reduce((previousMeta, pattern) => {\n    const { matched } = ressourceMatch(pattern, ressource)\n    return matched ? { ...previousMeta, ...metaMap[pattern] } : previousMeta\n  }, {})\n}\n","import { ressourceMatch } from \"./ressourceMatch.js\"\nimport { ressourceToMeta } from \"./ressourceToMeta.js\"\n\nexport const ressourceCanContainsMetaMatching = (metaMap, ressource, predicate) => {\n  if (typeof metaMap !== \"object\") {\n    throw new TypeError(\n      `ressourceCanContainsMetaMatching metaMap must be an object, got ${metaMap}`,\n    )\n  }\n  if (typeof ressource !== \"string\") {\n    throw new TypeError(\n      `ressourceCanContainsMetaMatching ressource must be a string, got ${ressource}`,\n    )\n  }\n  if (typeof predicate !== \"function\") {\n    throw new TypeError(\n      `ressourceCanContainsMetaMatching predicate must be a function, got ${predicate}`,\n    )\n  }\n\n  const matchIndexForRessource = ressource.split(\"/\").join(\"\").length\n  const partialMatch = Object.keys(metaMap).some((pattern) => {\n    const { matched, matchIndex } = ressourceMatch(pattern, ressource)\n    return matched === false && matchIndex >= matchIndexForRessource && predicate(metaMap[pattern])\n  })\n  if (partialMatch) {\n    return true\n  }\n\n  // no partial match satisfies predicate, does it work on a full match ?\n  const meta = ressourceToMeta(metaMap, ressource)\n  return Boolean(predicate(meta))\n}\n","import fs from \"fs\"\nimport { ressourceCanContainsMetaMatching } from \"./ressourceCanContainsMetaMatching.js\"\nimport { ressourceToMeta } from \"./ressourceToMeta.js\"\n\n// TODO: when using node 10.0 convert this to async generator\nexport const forEachRessourceMatching = async ({\n  localRoot,\n  metaMap,\n  predicate,\n  callback = (ressource) => ressource,\n}) => {\n  if (typeof localRoot !== \"string\") {\n    throw new TypeError(`forEachRessourceMatching localRoot must be a string, got ${localRoot}`)\n  }\n  if (typeof metaMap !== \"object\") {\n    throw new TypeError(`forEachRessourceMatching metaMap must be a object, got ${metaMap}`)\n  }\n  if (typeof predicate !== \"function\") {\n    throw new TypeError(`forEachRessourceMatching predicate must be a function, got ${predicate}`)\n  }\n  if (typeof callback !== \"function\") {\n    throw new TypeError(`forEachRessourceMatching callback must be a function, got ${callback}`)\n  }\n\n  const results = []\n  const visitFolder = async (folder) => {\n    const folderAbsolute = folder ? `${localRoot}/${folder}` : localRoot\n\n    const names = await readDirectory(folderAbsolute)\n\n    await Promise.all(\n      names.map(async (name) => {\n        const ressource = folder ? `${folder}/${name}` : name\n\n        const ressourceAbsolute = `${localRoot}/${ressource}`\n        const stat = await readStat(ressourceAbsolute)\n\n        if (stat.isDirectory()) {\n          if (!ressourceCanContainsMetaMatching(metaMap, ressource, predicate)) {\n            return null\n          }\n          return visitFolder(ressource)\n        }\n\n        const meta = ressourceToMeta(metaMap, ressource)\n        if (!predicate(meta)) {\n          return null\n        }\n\n        const result = await callback(ressource, meta)\n        results.push(result)\n        return null\n      }),\n    )\n  }\n\n  await visitFolder()\n\n  return results\n}\n\nconst readDirectory = (dirname) =>\n  new Promise((resolve, reject) => {\n    fs.readdir(dirname, (error, names) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(names)\n      }\n    })\n  })\n\nconst readStat = (filename) =>\n  new Promise((resolve, reject) => {\n    fs.stat(filename, (error, stat) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stat)\n      }\n    })\n  })\n","export const patternGroupToMetaMap = (patternGroup) => {\n  const metaMap = {}\n\n  Object.keys(patternGroup).forEach((metaName) => {\n    const valueMap = patternGroup[metaName]\n    Object.keys(valueMap).forEach((pattern) => {\n      const value = valueMap[pattern]\n      const meta = { [metaName]: value }\n\n      metaMap[pattern] = pattern in metaMap ? { ...metaMap[pattern], ...meta } : meta\n    })\n  })\n\n  return metaMap\n}\n"],"names":["ressourceMatch","pattern","ressource","match","patterns","split","parts","lastPatternRequired","lastSkipRequired","skipPredicate","sequencePattern","matchPart","sequencePart","charPattern","charSource","matched","patternIndex","partIndex","matchIndex","skipUntilStartsMatching","length","part","isSkipPattern","isLastPattern","isLastPart","nextPatternResult","slice","skipResult","partMatch","remainingPatternAreSkip","every","ressourceToMeta","metaMap","Object","keys","reduce","previousMeta","ressourceCanContainsMetaMatching","predicate","TypeError","matchIndexForRessource","join","partialMatch","some","meta","Boolean","forEachRessourceMatching","localRoot","callback","results","visitFolder","folder","folderAbsolute","names","readDirectory","Promise","all","map","name","ressourceAbsolute","stat","readStat","isDirectory","result","push","dirname","resolve","reject","fs","readdir","error","filename","patternGroupToMetaMap","patternGroup","forEach","metaName","valueMap","value"],"mappings":"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"}