{"version":3,"file":"index.js","sources":["../src/createLocationMeta.js","../src/forEachFileMatching.js","../src/createRoot.js"],"sourcesContent":["// https://git-scm.com/docs/gitignore\n\nconst match = ({\n  patterns,\n  parts,\n  skipPredicate,\n  lastSkipRequired,\n  lastPatternRequired,\n  matchPart,\n  skipUntilStartsMatching = false,\n}) => {\n  let matched\n  let patternIndex = 0\n  let partIndex = 0\n  let matchIndex = 0\n\n  if (patterns.length === 0 && parts.length === 0) {\n    matched = true\n  } else if (patterns.length === 0 && parts.length) {\n    matched = true\n    matchIndex = parts.length\n  } else if (patterns.length && parts.length === 0) {\n    matched = false\n  } else {\n    matched = true\n\n    while (true) {\n      const pattern = patterns[patternIndex]\n      const part = parts[partIndex]\n      const isSkipPattern = skipPredicate(pattern)\n      const isLastPattern = patternIndex === patterns.length - 1\n      const isLastPart = partIndex === parts.length - 1\n\n      if (isSkipPattern && isLastPart && isLastPattern) {\n        matchIndex++\n        break\n      }\n\n      if (isSkipPattern && isLastPattern && isLastPart === false) {\n        matchIndex++\n        break\n      }\n\n      if (isSkipPattern && isLastPattern === false && isLastPart) {\n        // test next pattern on current part\n        patternIndex++\n        continue\n      }\n\n      if (isSkipPattern && isLastPattern === false && isLastPart === false) {\n        // test next pattern on current part\n        patternIndex++\n\n        const skipResult = match({\n          patterns: patterns.slice(patternIndex),\n          parts: parts.slice(partIndex),\n          skipPredicate,\n          lastSkipRequired,\n          lastPatternRequired,\n          matchPart,\n          skipUntilStartsMatching: true,\n        })\n\n        matched = skipResult.matched\n        patternIndex += skipResult.patternIndex\n        partIndex += skipResult.partIndex\n        matchIndex += skipResult.matchIndex\n\n        if (matched && patternIndex === patterns.length - 1) {\n          break\n        }\n        if (matched && partIndex === parts.length - 1) {\n          break\n        }\n        if (matched) {\n          continue\n        }\n        break\n      }\n\n      const partMatch = matchPart(pattern, part)\n      matched = partMatch.matched\n      matchIndex += partMatch.matchIndex\n\n      if (matched && isLastPattern && isLastPart) {\n        break\n      }\n\n      if (matched && isLastPattern && isLastPart === false) {\n        if (lastPatternRequired) {\n          matched = false\n        }\n        break\n      }\n\n      if (matched && isLastPattern === false && isLastPart) {\n        const remainingPatternAreSkip = patterns\n          .slice(patternIndex + 1)\n          .every((pattern) => skipPredicate(pattern))\n\n        if (remainingPatternAreSkip && lastSkipRequired) {\n          matched = false\n          break\n        }\n        if (remainingPatternAreSkip === false) {\n          matched = false\n          break\n        }\n        break\n      }\n\n      if (matched && isLastPattern === false && isLastPart === false) {\n        patternIndex++\n        partIndex++\n        continue\n      }\n\n      if (matched === false && skipUntilStartsMatching && isLastPart === false) {\n        partIndex++ // keep searching for that pattern\n        matchIndex++\n        continue\n      }\n\n      break\n    }\n\n    return {\n      matched,\n      matchIndex,\n      patternIndex,\n      partIndex,\n    }\n  }\n}\n\nconst locationMatch = (pattern, location) => {\n  return match({\n    patterns: pattern.split(\"/\"),\n    parts: location.split(\"/\"),\n    lastPatternRequired: false,\n    lastSkipRequired: true,\n    skipPredicate: (sequencePattern) => sequencePattern === \"**\",\n    matchPart: (sequencePattern, sequencePart) => {\n      return match({\n        patterns: sequencePattern.split(\"\"),\n        parts: sequencePart.split(\"\"),\n        lastPatternRequired: true,\n        lastSkipRequired: false,\n        skipPredicate: (charPattern) => charPattern === \"*\",\n        matchPart: (charPattern, charSource) => {\n          const matched = charPattern === charSource\n          return {\n            matched,\n            patternIndex: 0,\n            partIndex: 0,\n            matchIndex: matched ? 1 : 0,\n          }\n        },\n      })\n    },\n  })\n}\n\nexport const createLocationMeta = () => {\n  const patternAndMetaList = []\n\n  const addMetaAtPattern = (pattern, meta) => {\n    patternAndMetaList.push({\n      pattern,\n      meta,\n    })\n  }\n\n  const getMetaForLocation = (filename) => {\n    return patternAndMetaList.reduce((previousMeta, { pattern, meta }) => {\n      const { matched } = locationMatch(pattern, filename)\n      return matched ? { ...previousMeta, ...meta } : previousMeta\n    }, {})\n  }\n\n  const canContainsMetaMatching = (filename, metaPredicate) => {\n    const matchIndexForFile = filename.split(\"/\").join(\"\").length\n    const meta = patternAndMetaList.reduce((previousMeta, { pattern, meta }) => {\n      const { matched, matchIndex } = locationMatch(pattern, filename)\n      return matched || matchIndex >= matchIndexForFile\n        ? { ...previousMeta, ...meta }\n        : previousMeta\n    }, {})\n    return Boolean(metaPredicate(meta))\n  }\n\n  return {\n    addMetaAtPattern,\n    getMetaForLocation,\n    canContainsMetaMatching,\n  }\n}\n","import fs from \"fs\"\n\nconst readDirectory = (dirname) =>\n  new Promise((resolve, reject) => {\n    fs.readdir(dirname, (error, names) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(names)\n      }\n    })\n  })\n\nconst readStat = (filename) =>\n  new Promise((resolve, reject) => {\n    fs.stat(filename, (error, stat) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stat)\n      }\n    })\n  })\n\nconst nothingToDo = {}\n\nexport const forEachFileMatching = (\n  { getMetaForLocation, canContainsMetaMatching },\n  root,\n  metaPredicate,\n  callback,\n) => {\n  const visit = (folderRelativeLocation) => {\n    const folderAbsoluteLocation = folderRelativeLocation\n      ? `${root}/${folderRelativeLocation}`\n      : root\n\n    return readDirectory(folderAbsoluteLocation).then((names) => {\n      return Promise.all(\n        names.map((name) => {\n          const ressourceRelativeLocation = folderRelativeLocation\n            ? `${folderRelativeLocation}/${name}`\n            : name\n          const ressourceAbsoluteLocation = `${root}/${ressourceRelativeLocation}`\n\n          return readStat(ressourceAbsoluteLocation).then((stat) => {\n            if (stat.isDirectory()) {\n              if (canContainsMetaMatching(ressourceRelativeLocation, metaPredicate) === false) {\n                return [nothingToDo]\n              }\n              return visit(ressourceRelativeLocation)\n            }\n\n            const meta = getMetaForLocation(ressourceRelativeLocation)\n            if (metaPredicate(meta)) {\n              return Promise.resolve(\n                callback({\n                  absoluteName: ressourceAbsoluteLocation,\n                  relativeName: ressourceRelativeLocation,\n                  meta,\n                }),\n              ).then((result) => {\n                return [result]\n              })\n            }\n            return [nothingToDo]\n          })\n        }),\n      ).then((results) => {\n        return results.reduce((previous, results) => {\n          return [...previous, ...results]\n        }, [])\n      })\n    })\n  }\n  return visit().then((allResults) => {\n    return allResults.filter((result) => result !== nothingToDo)\n  })\n}\n","import { createLocationMeta } from \"./createLocationMeta.js\"\nimport { forEachFileMatching } from \"./forEachFileMatching.js\"\n\nconst CONFIG_FILE_NAME = \"structure.config.js\"\n\nconst loadMetasForRoot = (root) => {\n  return new Promise((resolve, reject) => {\n    const filename = `${root}/${CONFIG_FILE_NAME}`\n\n    let value\n    let errored = false\n    try {\n      // eslint-disable-nextline no-dynamic-require\n      value = require(filename)\n    } catch (e) {\n      value = e\n      errored = true\n    }\n\n    if (errored) {\n      const error = value\n      if (error && error.code === \"MODULE_NOT_FOUND\") {\n        return reject(new Error(`${filename} not found`))\n      }\n      if (error && error.code === \"SYNTAX_ERROR\") {\n        console.error(`${filename} contains a syntax error`)\n        return reject(error)\n      }\n      if (error && error.code === \"REFERENCE_ERROR\") {\n        console.error(`${filename} contains a reference error`)\n        return reject(error)\n      }\n      return reject(error)\n    }\n\n    const namespace = value\n    const namespaceType = typeof namespace\n    if (namespaceType !== \"object\") {\n      return reject(new TypeError(`${filename} must export an object, got ${namespaceType}`))\n    }\n\n    resolve(namespace.metas || [])\n  })\n}\n\nexport const createRoot = (root) => {\n  return loadMetasForRoot(root).then((metas) => {\n    const locationMeta = createLocationMeta()\n    metas.forEach(({ pattern, meta }) => {\n      locationMeta.addMetaAtPattern(pattern, meta)\n    })\n\n    const scopedForEachFileMatching = (predicate, callback) =>\n      forEachFileMatching(locationMeta, root, predicate, callback)\n\n    const listFileMatching = (predicate) =>\n      forEachFileMatching(locationMeta, root, predicate, ({ relativeName }) => relativeName)\n\n    return {\n      forEachFileMatching: scopedForEachFileMatching,\n      listFileMatching,\n    }\n  })\n}\n"],"names":["match","patterns","parts","skipPredicate","lastSkipRequired","lastPatternRequired","matchPart","skipUntilStartsMatching","matched","patternIndex","partIndex","matchIndex","length","pattern","part","isSkipPattern","isLastPattern","isLastPart","skipResult","slice","partMatch","remainingPatternAreSkip","every","locationMatch","location","split","sequencePattern","sequencePart","charPattern","charSource","createLocationMeta","patternAndMetaList","addMetaAtPattern","meta","push","getMetaForLocation","filename","reduce","previousMeta","canContainsMetaMatching","metaPredicate","matchIndexForFile","join","Boolean","readDirectory","dirname","Promise","resolve","reject","fs","readdir","error","names","readStat","stat","nothingToDo","forEachFileMatching","root","callback","visit","folderRelativeLocation","folderAbsoluteLocation","then","all","map","name","ressourceRelativeLocation","ressourceAbsoluteLocation","isDirectory","absoluteName","relativeName","result","results","previous","allResults","filter","CONFIG_FILE_NAME","loadMetasForRoot","value","errored","require","e","code","Error","console","namespace","namespaceType","TypeError","metas","createRoot","locationMeta","forEach","scopedForEachFileMatching","predicate","listFileMatching"],"mappings":"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"}