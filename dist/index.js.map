{"version":3,"file":"index.js","sources":["../src/createLocationMeta.js"],"sourcesContent":["// https://git-scm.com/docs/gitignore\n\nconst partMatch = (pattern, part) => {\n  const match = ({ patterns, parts, skipUntilStartsMatching = false }) => {\n    let matched\n    let patternIndex = 0\n    let partIndex = 0\n\n    if (patterns.length === 0 && parts.length === 0) {\n      matched = true\n    } else if (patterns.length === 0 && parts.length) {\n      matched = false\n    } else if (patterns.length && parts.length === 0) {\n      matched = false\n    } else {\n      const isLastPartChar = () => partIndex === parts.length - 1\n      const isLastPatternChar = () => patternIndex === patterns.length - 1\n\n      while (true) {\n        const patternChar = patterns[patternIndex]\n\n        if (patternChar === \"*\") {\n          // part = 'ab', pattern = 'a*', partChar = 'b'\n          if (isLastPartChar() && isLastPatternChar()) {\n            break\n          }\n\n          // part = 'abc', pattern = 'a*', partChar = 'c'\n          if (isLastPartChar()) {\n            break\n          }\n\n          // part = 'bac', pattern = 'b*', partChar = 'a'\n          if (isLastPatternChar()) {\n            break\n          }\n\n          // part = 'ab', pattern = '*', partChar = 'a'\n          patternIndex++\n\n          debugger\n          const skipResult = match({\n            patterns: patterns.slice(patternIndex),\n            parts: parts.slice(partIndex),\n            skipUntilStartsMatching: true,\n          })\n\n          patternIndex += skipResult.patternIndex\n          partIndex += skipResult.partIndex\n\n          if (skipResult.matched) {\n            if (isLastPattern()) {\n              break\n            }\n            if (isLastPart()) {\n              break\n            }\n            continue\n          }\n\n          matched = false\n          break\n        }\n\n        const partChar = parts[partIndex]\n\n        if (patternChar === partChar) {\n          // it starts matching, cool\n          if (skipUntilStartsMatching) {\n            skipUntilStartsMatching = false\n          }\n\n          // part = 'a', pattern = 'a', partChar = 'a'\n          if (isLastPartChar() && isLastPatternChar()) {\n            break\n          }\n\n          // part = 'ab', pattern = 'a', partChar = 'a'\n          if (isLastPatternChar()) {\n            matched = false\n            break\n          }\n\n          // part = 'a', pattern = 'ab', partChar = 'a'\n          // or\n          // part = 'a', pattern = 'a*', partChar = 'a'\n          if (isLastPartChar()) {\n            patternIndex++\n            continue\n          }\n\n          // part = 'ab', pattern = 'ab', partChar = 'a'\n          partIndex++\n          patternIndex++\n          continue\n        }\n\n        if (skipUntilStartsMatching) {\n          partIndex++\n          continue\n        }\n\n        // part = 'ab', pattern = 'cd', partChar = 'a'\n        matched = false\n        break\n      }\n\n      return {\n        matched,\n        patternIndex,\n        partIndex,\n        remainingPattern: patterns.length - patternIndex,\n      }\n    }\n  }\n\n  return match({\n    patterns: pattern.split(\"\"),\n    parts: part.split(\"\"),\n  })\n}\n\nconst locationMatch = (pattern, location) => {\n  const match = ({ patterns, parts }) => {\n    let patternIndex = 0\n    let partIndex = 0\n\n    const isLastPart = () => partIndex === parts.length - 1\n    const isLastPattern = () => patternIndex === patterns.length - 1\n    let matched = true\n\n    while (true) {\n      const pattern = patterns[patternIndex]\n\n      if (pattern === \"**\") {\n        // location = 'a/b', pattern = 'a/**', part = 'b'\n        if (isLastPart() && isLastPattern()) {\n          break\n        }\n\n        // location = 'a/b', pattern = 'a/**', part = 'a'\n        if (isLastPattern()) {\n          break\n        }\n\n        // location = 'a/b', pattern = '**/b', part = 'b'\n        if (isLastPart()) {\n          patternIndex++\n          continue\n        }\n\n        // location = 'a/b', pattern = '**/b', part = 'a'\n        partIndex++\n        patternIndex++\n\n        const skipResult = match({\n          patterns: patterns.slice(patternIndex),\n          parts: parts.slice(partIndex),\n        })\n\n        patternIndex += skipResult.patternIndex\n        partIndex += skipResult.partIndex\n        matched = skipResult.matched\n\n        if (matched) {\n          if (isLastPattern()) {\n            break\n          }\n          if (isLastPart()) {\n            break\n          }\n          continue\n        }\n\n        break\n      }\n\n      const part = parts[partIndex]\n\n      if (partMatch(pattern, part)) {\n        // location = 'a/b', pattern = 'a/b', part = 'b'\n        if (isLastPart() && isLastPattern()) {\n          partIndex++\n          break\n        }\n\n        // location = 'a', pattern = 'a/b', part = 'a'\n        if (isLastPart()) {\n          partIndex++\n          matched = false\n          break\n        }\n\n        // location = 'a/b', pattern = 'a', part = 'a'\n        if (isLastPattern()) {\n          partIndex++\n          break\n        }\n\n        // location = 'a/b', pattern = 'a/b', part = 'a'\n        partIndex++\n        patternIndex++\n        continue\n      }\n\n      // location = 'a/b', pattern = 'b/a', part = 'a'\n      matched = false\n      break\n    }\n\n    return {\n      matched,\n      patternIndex,\n      partIndex,\n      remainingPattern: patterns.length - patternIndex,\n    }\n  }\n\n  return match({\n    patterns: pattern.split(\"/\"),\n    parts: location.split(\"/\"),\n  })\n}\n\nexport const createLocationMeta = () => {\n  const patternAndMetaList = []\n\n  const addMetaAtPattern = (pattern, meta) => {\n    patternAndMetaList.push({\n      pattern,\n      meta,\n    })\n  }\n\n  const getMetaForLocation = (filename) => {\n    return patternAndMetaList.reduce((previousMeta, { pattern, meta }) => {\n      const { matched } = locationMatch(pattern, filename)\n      return matched ? { ...previousMeta, ...meta } : previousMeta\n    }, {})\n  }\n\n  const canContainsMetaMatching = (filename, metaPredicate) => {\n    return patternAndMetaList.some(({ pattern, meta }) => {\n      const { partIndex } = locationMatch(pattern, filename)\n      const parts = filename.split(\"/\")\n      return partIndex === parts.length && metaPredicate(meta)\n    })\n  }\n\n  return {\n    addMetaAtPattern,\n    getMetaForLocation,\n    canContainsMetaMatching,\n  }\n}\n"],"names":["partMatch","pattern","part","match","patterns","parts","skipUntilStartsMatching","matched","patternIndex","partIndex","length","isLastPartChar","isLastPatternChar","patternChar","skipResult","slice","isLastPattern","isLastPart","partChar","remainingPattern","split","locationMatch","location","createLocationMeta","patternAndMetaList","addMetaAtPattern","meta","push","getMetaForLocation","filename","reduce","previousMeta","canContainsMetaMatching","metaPredicate","some"],"mappings":"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"}