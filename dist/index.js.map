{"version":3,"file":"index.js","sources":["../src/createLocationMeta.js"],"sourcesContent":["// https://git-scm.com/docs/gitignore\n\nconst match = ({\n  patterns,\n  parts,\n  skipPredicate,\n  lastSkipRequired,\n  lastPatternRequired,\n  matchPart,\n  skipUntilStartsMatching = false,\n}) => {\n  let matched\n  let patternIndex = 0\n  let partIndex = 0\n  let matchIndex = 0\n\n  if (patterns.length === 0 && parts.length === 0) {\n    matched = true\n  } else if (patterns.length === 0 && parts.length) {\n    matched = true\n    matchIndex = parts.length\n  } else if (patterns.length && parts.length === 0) {\n    matched = false\n  } else {\n    matched = true\n\n    while (true) {\n      const pattern = patterns[patternIndex]\n      const part = parts[partIndex]\n      const isSkipPattern = skipPredicate(pattern)\n      const isLastPattern = patternIndex === patterns.length - 1\n      const isLastPart = partIndex === parts.length - 1\n\n      if (isSkipPattern && isLastPart && isLastPattern) {\n        matchIndex++\n        break\n      }\n\n      if (isSkipPattern && isLastPattern && isLastPart === false) {\n        matchIndex++\n        break\n      }\n\n      if (isSkipPattern && isLastPattern === false && isLastPart) {\n        // test next pattern on current part\n        patternIndex++\n        continue\n      }\n\n      if (isSkipPattern && isLastPattern === false && isLastPart === false) {\n        // test next pattern on current part\n        patternIndex++\n\n        const skipResult = match({\n          patterns: patterns.slice(patternIndex),\n          parts: parts.slice(partIndex),\n          skipPredicate,\n          lastSkipRequired,\n          lastPatternRequired,\n          matchPart,\n          skipUntilStartsMatching: true,\n        })\n\n        matched = skipResult.matched\n        patternIndex += skipResult.patternIndex\n        partIndex += skipResult.partIndex\n        matchIndex += skipResult.matchIndex\n\n        if (matched && patternIndex === patterns.length - 1) {\n          break\n        }\n        if (matched && partIndex === parts.length - 1) {\n          break\n        }\n        if (matched) {\n          continue\n        }\n        break\n      }\n\n      const partMatch = matchPart(pattern, part)\n      matched = partMatch.matched\n      matchIndex += partMatch.matchIndex\n\n      if (matched && skipUntilStartsMatching) {\n        skipUntilStartsMatching = false\n      }\n\n      if (matched && isLastPattern && isLastPart) {\n        break\n      }\n\n      if (matched && isLastPattern && isLastPart === false) {\n        if (lastPatternRequired) {\n          matched = false\n        }\n        break\n      }\n\n      if (matched && isLastPattern === false && isLastPart) {\n        const remainingPatternAreSkip = patterns\n          .slice(patternIndex + 1)\n          .every((pattern) => skipPredicate(pattern))\n\n        if (remainingPatternAreSkip && lastSkipRequired) {\n          matched = false\n          break\n        }\n        if (remainingPatternAreSkip === false) {\n          matched = false\n          break\n        }\n        break\n      }\n\n      if (matched && isLastPattern === false && isLastPart === false) {\n        patternIndex++\n        partIndex++\n        continue\n      }\n\n      if (matched === false && skipUntilStartsMatching && isLastPart === false) {\n        partIndex++ // keep searching for that pattern\n        continue\n      }\n\n      break\n    }\n\n    return {\n      matched,\n      matchIndex,\n      patternIndex,\n      partIndex,\n    }\n  }\n}\n\nconst locationMatch = (pattern, location) => {\n  return match({\n    patterns: pattern.split(\"/\"),\n    parts: location.split(\"/\"),\n    lastPatternRequired: false,\n    lastSkipRequired: true,\n    skipPredicate: (sequencePattern) => sequencePattern === \"**\",\n    matchPart: (sequencePattern, sequencePart) => {\n      return match({\n        patterns: sequencePattern.split(\"\"),\n        parts: sequencePart.split(\"\"),\n        lastPatternRequired: true,\n        lastSkipRequired: false,\n        skipPredicate: (charPattern) => charPattern === \"*\",\n        matchPart: (charPattern, charSource) => {\n          const matched = charPattern === charSource\n          return {\n            matched,\n            patternIndex: 0,\n            partIndex: 0,\n            matchIndex: 1,\n          }\n        },\n      })\n    },\n  })\n}\n\nexport const createLocationMeta = () => {\n  const patternAndMetaList = []\n\n  const addMetaAtPattern = (pattern, meta) => {\n    patternAndMetaList.push({\n      pattern,\n      meta,\n    })\n  }\n\n  const getMetaForLocation = (filename) => {\n    return patternAndMetaList.reduce((previousMeta, { pattern, meta }) => {\n      const { matched } = locationMatch(pattern, filename)\n      return matched ? { ...previousMeta, ...meta } : previousMeta\n    }, {})\n  }\n\n  const canContainsMetaMatching = (filename, metaPredicate) => {\n    return patternAndMetaList.some(({ pattern, meta }) => {\n      const matchIndexForFile = filename.split(\"/\").join(\"\").length\n      const { matchIndex } = locationMatch(pattern, filename)\n      debugger\n      return matchIndex >= matchIndexForFile && metaPredicate(meta)\n    })\n  }\n\n  return {\n    addMetaAtPattern,\n    getMetaForLocation,\n    canContainsMetaMatching,\n  }\n}\n"],"names":["match","patterns","parts","skipPredicate","lastSkipRequired","lastPatternRequired","matchPart","skipUntilStartsMatching","matched","patternIndex","partIndex","matchIndex","length","pattern","part","isSkipPattern","isLastPattern","isLastPart","skipResult","slice","partMatch","remainingPatternAreSkip","every","locationMatch","location","split","sequencePattern","sequencePart","charPattern","charSource","createLocationMeta","patternAndMetaList","addMetaAtPattern","meta","push","getMetaForLocation","filename","reduce","previousMeta","canContainsMetaMatching","metaPredicate","some","matchIndexForFile","join"],"mappings":"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"}